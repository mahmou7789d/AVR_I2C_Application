
Slave_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000360  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  000003d4  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000148  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001132  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000056b  00000000  00000000  0000167e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000005a4  00000000  00000000  00001be9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000228  00000000  00000000  00002190  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000698  00000000  00000000  000023b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000005ef  00000000  00000000  00002a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000f8  00000000  00000000  0000303f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 50 00 	call	0xa0	; 0xa0 <main>
  74:	0c 94 ae 01 	jmp	0x35c	; 0x35c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Slave_Init_system>:
#include <Slave_app.h>
uint_8 Received_Data =0;

void Slave_Init_system()
{
	TWI_1.Micro_state = Slave_Receiver;
  7c:	83 e0       	ldi	r24, 0x03	; 3
  7e:	80 93 64 00 	sts	0x0064, r24
	TWI_1.Presaler_Val = No_Presaler;
  82:	10 92 62 00 	sts	0x0062, r1
	
	LCD_Init();
  86:	0e 94 92 00 	call	0x124	; 0x124 <LCD_Init>
	Set_SLA_Value(0b11100000);
  8a:	80 ee       	ldi	r24, 0xE0	; 224
  8c:	0e 94 8a 01 	call	0x314	; 0x314 <Set_SLA_Value>
  90:	08 95       	ret

00000092 <Slave_Control_system>:
	
}

void Slave_Control_system()
{
	Received_Data =TWI_Read_Byte();
  92:	0e 94 8c 01 	call	0x318	; 0x318 <TWI_Read_Byte>
  96:	80 93 60 00 	sts	0x0060, r24
	Send_char_LCD(Received_Data);
  9a:	0e 94 de 00 	call	0x1bc	; 0x1bc <Send_char_LCD>
  9e:	08 95       	ret

000000a0 <main>:
#include <Slave_app.h>


int main(void)
{
	Slave_Init_system();
  a0:	0e 94 3e 00 	call	0x7c	; 0x7c <Slave_Init_system>
    while(1)
    {
		Slave_Control_system();
  a4:	0e 94 49 00 	call	0x92	; 0x92 <Slave_Control_system>
  a8:	fd cf       	rjmp	.-6      	; 0xa4 <main+0x4>

000000aa <Set_Enable_Bit>:

#include <LCD.h>
#include <util/delay.h>
static void Set_Enable_Bit()
{
	GPIO_Pin_Write(Port_B,EN_Pin,HIGH);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	86 e3       	ldi	r24, 0x36	; 54
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 3f 01 	call	0x27e	; 0x27e <GPIO_Pin_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	8f e9       	ldi	r24, 0x9F	; 159
  b8:	9f e0       	ldi	r25, 0x0F	; 15
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <Set_Enable_Bit+0x10>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <Set_Enable_Bit+0x16>
  c0:	00 00       	nop
	_delay_ms(2);
	GPIO_Pin_Write(Port_B,EN_Pin,LOW);
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	62 e0       	ldi	r22, 0x02	; 2
  c6:	86 e3       	ldi	r24, 0x36	; 54
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 3f 01 	call	0x27e	; 0x27e <GPIO_Pin_Write>
  ce:	8f e9       	ldi	r24, 0x9F	; 159
  d0:	9f e0       	ldi	r25, 0x0F	; 15
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <Set_Enable_Bit+0x28>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <Set_Enable_Bit+0x2e>
  d8:	00 00       	nop
  da:	08 95       	ret

000000dc <Send_Command_LCD>:
	_delay_ms(10);
	#endif
	#endif
}
void Send_Command_LCD(uint_8 Command)
{
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Command);
  e0:	68 2f       	mov	r22, r24
  e2:	82 e4       	ldi	r24, 0x42	; 66
  e4:	0e 94 65 01 	call	0x2ca	; 0x2ca <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
  e8:	40 e0       	ldi	r20, 0x00	; 0
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	86 e3       	ldi	r24, 0x36	; 54
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 3f 01 	call	0x27e	; 0x27e <GPIO_Pin_Write>
	Set_Enable_Bit();
  f4:	0e 94 55 00 	call	0xaa	; 0xaa <Set_Enable_Bit>
	GPIO_Write_High_Nibble('B',Command<<4);
  f8:	6c 2f       	mov	r22, r28
  fa:	62 95       	swap	r22
  fc:	60 7f       	andi	r22, 0xF0	; 240
  fe:	82 e4       	ldi	r24, 0x42	; 66
 100:	0e 94 65 01 	call	0x2ca	; 0x2ca <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
 104:	40 e0       	ldi	r20, 0x00	; 0
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	86 e3       	ldi	r24, 0x36	; 54
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 3f 01 	call	0x27e	; 0x27e <GPIO_Pin_Write>
	Set_Enable_Bit();
 110:	0e 94 55 00 	call	0xaa	; 0xaa <Set_Enable_Bit>
 114:	8f ec       	ldi	r24, 0xCF	; 207
 116:	97 e0       	ldi	r25, 0x07	; 7
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <Send_Command_LCD+0x3c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <Send_Command_LCD+0x42>
 11e:	00 00       	nop
	GPIO_Pin_Write(Port_B,RS_Pin,LOW);
	Set_Enable_Bit();
	_delay_ms(1);
	#endif
	#endif
}
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <LCD_Init>:
 124:	2f ef       	ldi	r18, 0xFF	; 255
 126:	81 ee       	ldi	r24, 0xE1	; 225
 128:	94 e0       	ldi	r25, 0x04	; 4
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <LCD_Init+0x6>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_Init+0x10>
 134:	00 00       	nop
	Send_Command_LCD(Clear_Display);
	_delay_ms(10);
	
	#elif  defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Port_Configuration(Port_B,0XF0);
 136:	60 ef       	ldi	r22, 0xF0	; 240
 138:	86 e3       	ldi	r24, 0x36	; 54
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 62 01 	call	0x2c4	; 0x2c4 <GPIO_Port_Configuration>
	GPIO_Pin_Configuration(Port_B,RS_Pin,OUTPUT);
 140:	40 e0       	ldi	r20, 0x00	; 0
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	86 e3       	ldi	r24, 0x36	; 54
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_Pin_Configuration>
	GPIO_Pin_Configuration(Port_B,EN_Pin,OUTPUT);
 14c:	40 e0       	ldi	r20, 0x00	; 0
 14e:	62 e0       	ldi	r22, 0x02	; 2
 150:	86 e3       	ldi	r24, 0x36	; 54
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_Pin_Configuration>
	GPIO_Pin_Configuration(Port_B,RW_Pin,OUTPUT);
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	86 e3       	ldi	r24, 0x36	; 54
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 02 01 	call	0x204	; 0x204 <GPIO_Pin_Configuration>
	CLEAR_BIT(LCD_CONTROL_BIT_PORT,RW_Pin);
 164:	a9 98       	cbi	0x15, 1	; 21
 166:	8f ec       	ldi	r24, 0xCF	; 207
 168:	97 e0       	ldi	r25, 0x07	; 7
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_Init+0x46>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_Init+0x4c>
 170:	00 00       	nop
	_delay_ms(1);
	Send_Command_LCD(Return_Home);
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 6e 00 	call	0xdc	; 0xdc <Send_Command_LCD>
 178:	8f ec       	ldi	r24, 0xCF	; 207
 17a:	97 e0       	ldi	r25, 0x07	; 7
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <LCD_Init+0x58>
 180:	00 c0       	rjmp	.+0      	; 0x182 <LCD_Init+0x5e>
 182:	00 00       	nop
	_delay_ms(1);
	Send_Command_LCD(Function_Set_Four_BIT);
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	0e 94 6e 00 	call	0xdc	; 0xdc <Send_Command_LCD>
 18a:	8f ec       	ldi	r24, 0xCF	; 207
 18c:	97 e0       	ldi	r25, 0x07	; 7
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <LCD_Init+0x6a>
 192:	00 c0       	rjmp	.+0      	; 0x194 <LCD_Init+0x70>
 194:	00 00       	nop
	_delay_ms(1);
	Send_Command_LCD(Display_On_Curser_On);
 196:	8e e0       	ldi	r24, 0x0E	; 14
 198:	0e 94 6e 00 	call	0xdc	; 0xdc <Send_Command_LCD>
 19c:	8f ec       	ldi	r24, 0xCF	; 207
 19e:	97 e0       	ldi	r25, 0x07	; 7
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_Init+0x7c>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_Init+0x82>
 1a6:	00 00       	nop
	_delay_ms(1);
	Send_Command_LCD(Clear_Display);
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 6e 00 	call	0xdc	; 0xdc <Send_Command_LCD>
 1ae:	8f e1       	ldi	r24, 0x1F	; 31
 1b0:	9e e4       	ldi	r25, 0x4E	; 78
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <LCD_Init+0x8e>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <LCD_Init+0x94>
 1b8:	00 00       	nop
 1ba:	08 95       	ret

000001bc <Send_char_LCD>:
	_delay_ms(1);
	#endif
	#endif
}
void Send_char_LCD(uint_8 Character)
{
 1bc:	cf 93       	push	r28
 1be:	c8 2f       	mov	r28, r24
	GPIO_Port_Write(Port_B,Character);
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
	Set_Enable_Bit();
	#elif defined Four_Bits_Mode
	#ifdef LCD_UPPER_DATA_PORT
	GPIO_Write_High_Nibble('B',Character);
 1c0:	68 2f       	mov	r22, r24
 1c2:	82 e4       	ldi	r24, 0x42	; 66
 1c4:	0e 94 65 01 	call	0x2ca	; 0x2ca <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
 1c8:	41 e0       	ldi	r20, 0x01	; 1
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	86 e3       	ldi	r24, 0x36	; 54
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 3f 01 	call	0x27e	; 0x27e <GPIO_Pin_Write>
	Set_Enable_Bit();
 1d4:	0e 94 55 00 	call	0xaa	; 0xaa <Set_Enable_Bit>
	GPIO_Write_High_Nibble('B',Character<<4);
 1d8:	6c 2f       	mov	r22, r28
 1da:	62 95       	swap	r22
 1dc:	60 7f       	andi	r22, 0xF0	; 240
 1de:	82 e4       	ldi	r24, 0x42	; 66
 1e0:	0e 94 65 01 	call	0x2ca	; 0x2ca <GPIO_Write_High_Nibble>
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	86 e3       	ldi	r24, 0x36	; 54
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 3f 01 	call	0x27e	; 0x27e <GPIO_Pin_Write>
	Set_Enable_Bit();
 1f0:	0e 94 55 00 	call	0xaa	; 0xaa <Set_Enable_Bit>
 1f4:	8f ec       	ldi	r24, 0xCF	; 207
 1f6:	97 e0       	ldi	r25, 0x07	; 7
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <Send_char_LCD+0x3c>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <Send_char_LCD+0x42>
 1fe:	00 00       	nop
	GPIO_Pin_Write(Port_B,RS_Pin,HIGH);
	Set_Enable_Bit();
	_delay_ms(1);
	#endif
	#endif
}
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <GPIO_Pin_Configuration>:
		default:
		break;
	}
}
void GPIO_Pin_Configuration (GPIO_Register* Chip_port,GPIO_pin_number pin_num,GPIO_pin_Type  O_Or_I_Mode )
{
 204:	fc 01       	movw	r30, r24
	 //because of the factor by which we can select the functionality of the function is the Mode of pin , we perform Switch case on the mode 
	 switch (O_Or_I_Mode)  // switch is more fast and readable than if because we know the three available options
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	21 f0       	breq	.+8      	; 0x212 <GPIO_Pin_Configuration+0xe>
 20a:	38 f1       	brcs	.+78     	; 0x25a <GPIO_Pin_Configuration+0x56>
 20c:	42 30       	cpi	r20, 0x02	; 2
 20e:	99 f0       	breq	.+38     	; 0x236 <GPIO_Pin_Configuration+0x32>
 210:	08 95       	ret
	 {
		case INPUT_Float:
		CLEAR_BIT(Chip_port->DDR ,pin_num);
 212:	21 81       	ldd	r18, Z+1	; 0x01
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	ac 01       	movw	r20, r24
 21a:	02 c0       	rjmp	.+4      	; 0x220 <GPIO_Pin_Configuration+0x1c>
 21c:	44 0f       	add	r20, r20
 21e:	55 1f       	adc	r21, r21
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <GPIO_Pin_Configuration+0x18>
 224:	ba 01       	movw	r22, r20
 226:	60 95       	com	r22
 228:	86 2f       	mov	r24, r22
 22a:	82 23       	and	r24, r18
 22c:	81 83       	std	Z+1, r24	; 0x01
		CLEAR_BIT(Chip_port->PORT,pin_num);
 22e:	82 81       	ldd	r24, Z+2	; 0x02
 230:	68 23       	and	r22, r24
 232:	62 83       	std	Z+2, r22	; 0x02
		break;
 234:	08 95       	ret
		case INPUT_Pullup:
		CLEAR_BIT(Chip_port->DDR ,pin_num);
 236:	21 81       	ldd	r18, Z+1	; 0x01
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	ac 01       	movw	r20, r24
 23e:	02 c0       	rjmp	.+4      	; 0x244 <GPIO_Pin_Configuration+0x40>
 240:	44 0f       	add	r20, r20
 242:	55 1f       	adc	r21, r21
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <GPIO_Pin_Configuration+0x3c>
 248:	ba 01       	movw	r22, r20
 24a:	84 2f       	mov	r24, r20
 24c:	80 95       	com	r24
 24e:	82 23       	and	r24, r18
 250:	81 83       	std	Z+1, r24	; 0x01
		SET_BIT  (Chip_port->PORT,pin_num);
 252:	82 81       	ldd	r24, Z+2	; 0x02
 254:	68 2b       	or	r22, r24
 256:	62 83       	std	Z+2, r22	; 0x02
		break;
 258:	08 95       	ret
		case OUTPUT:
		SET_BIT  (Chip_port->DDR ,pin_num);
 25a:	21 81       	ldd	r18, Z+1	; 0x01
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	ac 01       	movw	r20, r24
 262:	02 c0       	rjmp	.+4      	; 0x268 <GPIO_Pin_Configuration+0x64>
 264:	44 0f       	add	r20, r20
 266:	55 1f       	adc	r21, r21
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <GPIO_Pin_Configuration+0x60>
 26c:	ba 01       	movw	r22, r20
 26e:	82 2f       	mov	r24, r18
 270:	84 2b       	or	r24, r20
 272:	81 83       	std	Z+1, r24	; 0x01
		CLEAR_BIT(Chip_port->PORT,pin_num);
 274:	82 81       	ldd	r24, Z+2	; 0x02
 276:	60 95       	com	r22
 278:	68 23       	and	r22, r24
 27a:	62 83       	std	Z+2, r22	; 0x02
 27c:	08 95       	ret

0000027e <GPIO_Pin_Write>:
 	}

}
void GPIO_Pin_Write(GPIO_Register *Chip_port,GPIO_pin_number pin_num,Digital_pinState Pin_state)
{
	 switch(Pin_state)
 27e:	44 23       	and	r20, r20
 280:	89 f0       	breq	.+34     	; 0x2a4 <GPIO_Pin_Write+0x26>
 282:	41 30       	cpi	r20, 0x01	; 1
 284:	f1 f4       	brne	.+60     	; 0x2c2 <GPIO_Pin_Write+0x44>
	 {
		case HIGH:
		SET_BIT(Chip_port->PORT,pin_num);
 286:	fc 01       	movw	r30, r24
 288:	42 81       	ldd	r20, Z+2	; 0x02
 28a:	21 e0       	ldi	r18, 0x01	; 1
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	f9 01       	movw	r30, r18
 290:	02 c0       	rjmp	.+4      	; 0x296 <GPIO_Pin_Write+0x18>
 292:	ee 0f       	add	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	6a 95       	dec	r22
 298:	e2 f7       	brpl	.-8      	; 0x292 <GPIO_Pin_Write+0x14>
 29a:	bf 01       	movw	r22, r30
 29c:	64 2b       	or	r22, r20
 29e:	fc 01       	movw	r30, r24
 2a0:	62 83       	std	Z+2, r22	; 0x02
		break;
 2a2:	08 95       	ret
		case LOW:
		CLEAR_BIT(Chip_port->PORT,pin_num);
 2a4:	fc 01       	movw	r30, r24
 2a6:	42 81       	ldd	r20, Z+2	; 0x02
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	f9 01       	movw	r30, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <GPIO_Pin_Write+0x36>
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <GPIO_Pin_Write+0x32>
 2b8:	bf 01       	movw	r22, r30
 2ba:	60 95       	com	r22
 2bc:	64 23       	and	r22, r20
 2be:	fc 01       	movw	r30, r24
 2c0:	62 83       	std	Z+2, r22	; 0x02
 2c2:	08 95       	ret

000002c4 <GPIO_Port_Configuration>:
	/* We Must Check That THe Value Of The configuration Of The Port Does Not exceed The 8 bit (0 <-> 255) */
	if (port_Value <= Max_uint8_Value && port_Value >= Min_uint8_Value)
	{
		/* The Value On The 8 bit DDR To Define Each Pin From The 8 Pins Of The Port As input Or Output */
		/* equal the port to the 0xFF to get the output */
		Chip_port->DDR = port_Value;
 2c4:	fc 01       	movw	r30, r24
 2c6:	61 83       	std	Z+1, r22	; 0x01
 2c8:	08 95       	ret

000002ca <GPIO_Write_High_Nibble>:
}


void GPIO_Write_High_Nibble(uint_8 Port_Name,uint_8 High_Nibble_value)
{
	High_Nibble_value &=0xf0;
 2ca:	60 7f       	andi	r22, 0xF0	; 240
	switch(Port_Name)
 2cc:	82 34       	cpi	r24, 0x42	; 66
 2ce:	79 f0       	breq	.+30     	; 0x2ee <GPIO_Write_High_Nibble+0x24>
 2d0:	18 f4       	brcc	.+6      	; 0x2d8 <GPIO_Write_High_Nibble+0xe>
 2d2:	81 34       	cpi	r24, 0x41	; 65
 2d4:	31 f0       	breq	.+12     	; 0x2e2 <GPIO_Write_High_Nibble+0x18>
 2d6:	08 95       	ret
 2d8:	83 34       	cpi	r24, 0x43	; 67
 2da:	79 f0       	breq	.+30     	; 0x2fa <GPIO_Write_High_Nibble+0x30>
 2dc:	84 34       	cpi	r24, 0x44	; 68
 2de:	99 f0       	breq	.+38     	; 0x306 <GPIO_Write_High_Nibble+0x3c>
 2e0:	08 95       	ret
	{
		case 'A':
		Port_A->PORT &=0x0f;
 2e2:	8b b3       	in	r24, 0x1b	; 27
 2e4:	8f 70       	andi	r24, 0x0F	; 15
 2e6:	8b bb       	out	0x1b, r24	; 27
		Port_A->PORT |=High_Nibble_value;
 2e8:	8b b3       	in	r24, 0x1b	; 27
 2ea:	86 2b       	or	r24, r22
 2ec:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		Port_B->PORT &=0x0f;
 2ee:	88 b3       	in	r24, 0x18	; 24
 2f0:	8f 70       	andi	r24, 0x0F	; 15
 2f2:	88 bb       	out	0x18, r24	; 24
		Port_B->PORT |=High_Nibble_value;
 2f4:	88 b3       	in	r24, 0x18	; 24
 2f6:	86 2b       	or	r24, r22
 2f8:	88 bb       	out	0x18, r24	; 24
		case 'C':
		Port_C->PORT &=0x0f;
 2fa:	85 b3       	in	r24, 0x15	; 21
 2fc:	8f 70       	andi	r24, 0x0F	; 15
 2fe:	85 bb       	out	0x15, r24	; 21
		Port_C->PORT |=High_Nibble_value;
 300:	85 b3       	in	r24, 0x15	; 21
 302:	86 2b       	or	r24, r22
 304:	85 bb       	out	0x15, r24	; 21
		case 'D':
		Port_D->PORT &=0x0f;
 306:	82 b3       	in	r24, 0x12	; 18
 308:	8f 70       	andi	r24, 0x0F	; 15
 30a:	82 bb       	out	0x12, r24	; 18
		Port_D->PORT |=High_Nibble_value;
 30c:	82 b3       	in	r24, 0x12	; 18
 30e:	68 2b       	or	r22, r24
 310:	62 bb       	out	0x12, r22	; 18
 312:	08 95       	ret

00000314 <Set_SLA_Value>:
	 SET_BIT(TWCR,TWSTO_bit);
 }

 void Set_SLA_Value(uint_8 address)
 {
	 TWAR=address;
 314:	82 b9       	out	0x02, r24	; 2
 316:	08 95       	ret

00000318 <TWI_Read_Byte>:
 }

 uint_8 TWI_Read_Byte(void)
 {
	 
	 SET_BIT(TWCR,TWEN_bit);
 318:	86 b7       	in	r24, 0x36	; 54
 31a:	84 60       	ori	r24, 0x04	; 4
 31c:	86 bf       	out	0x36, r24	; 54
	 SET_BIT(TWCR,TWEA_bit);
 31e:	86 b7       	in	r24, 0x36	; 54
 320:	80 64       	ori	r24, 0x40	; 64
 322:	86 bf       	out	0x36, r24	; 54
	 SET_BIT(TWCR,TWINT_bit);
 324:	86 b7       	in	r24, 0x36	; 54
 326:	80 68       	ori	r24, 0x80	; 128
 328:	86 bf       	out	0x36, r24	; 54
	 while(READ_BIT(TWCR,TWINT_bit)==0);
 32a:	06 b6       	in	r0, 0x36	; 54
 32c:	07 fe       	sbrs	r0, 7
 32e:	fd cf       	rjmp	.-6      	; 0x32a <TWI_Read_Byte+0x12>
	 while ((TWSR & Mask_Prescaler_val) != Own_SLA_A_Returned_status); // own SLA+W has been received and ACK has been returned
 330:	81 b1       	in	r24, 0x01	; 1
 332:	88 7f       	andi	r24, 0xF8	; 248
 334:	80 36       	cpi	r24, 0x60	; 96
 336:	e1 f7       	brne	.-8      	; 0x330 <TWI_Read_Byte+0x18>
	 SET_BIT(TWCR,TWEN_bit);
 338:	86 b7       	in	r24, 0x36	; 54
 33a:	84 60       	ori	r24, 0x04	; 4
 33c:	86 bf       	out	0x36, r24	; 54
	 SET_BIT(TWCR,TWEA_bit);
 33e:	86 b7       	in	r24, 0x36	; 54
 340:	80 64       	ori	r24, 0x40	; 64
 342:	86 bf       	out	0x36, r24	; 54
	 SET_BIT(TWCR,TWINT_bit);
 344:	86 b7       	in	r24, 0x36	; 54
 346:	80 68       	ori	r24, 0x80	; 128
 348:	86 bf       	out	0x36, r24	; 54
	 while (READ_BIT(TWCR,TWINT_bit) ==0);
 34a:	06 b6       	in	r0, 0x36	; 54
 34c:	07 fe       	sbrs	r0, 7
 34e:	fd cf       	rjmp	.-6      	; 0x34a <TWI_Read_Byte+0x32>
	 while ((TWSR & Mask_Prescaler_val) != Data_Rec_A_Returned_status);
 350:	81 b1       	in	r24, 0x01	; 1
 352:	88 7f       	andi	r24, 0xF8	; 248
 354:	80 38       	cpi	r24, 0x80	; 128
 356:	e1 f7       	brne	.-8      	; 0x350 <TWI_Read_Byte+0x38>
	 return TWDR;
 358:	83 b1       	in	r24, 0x03	; 3
 35a:	08 95       	ret

0000035c <_exit>:
 35c:	f8 94       	cli

0000035e <__stop_program>:
 35e:	ff cf       	rjmp	.-2      	; 0x35e <__stop_program>
